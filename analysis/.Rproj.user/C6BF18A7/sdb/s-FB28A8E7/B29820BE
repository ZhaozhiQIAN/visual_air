{
    "contents" : "library(\"gstat\")\nlibrary(\"spacetime\")\nlibrary(\"sp\")\nlibrary(\"reshape2\")\nlibrary(\"RColorBrewer\")\n\n# Chinese classification\npm25_cuts = c(0, 35, 75, 115, 150, 250, 500)\npm25_labels = c(\"A: 0-35\", \"B: 35-75\", \"C: 75-115\", \"D: 115:150\", \"E: 150-250\", \"F: 250-500\")\npm25_cuts_stplot = c(0, 0.01, 35, 75, 115, 150, 250, 500)\npm25_col = brewer.pal(6,\"YlOrRd\")\nnames(pm25_col) = pm25_labels\n# take a sample of data and try to fit kriging model: one month\nsamp_dat = join_dat[(join_dat$date > as.Date(\"2015-10-31\")) & (join_dat$date < as.Date(\"2015-12-1\")), ]\n\n# create a spatial data frame\n# coordinates(samp_dat) = ~GPSLontitude+GPSLatitude\n\n# location of observertory, time of observation\nobs_loc = unique(samp_dat[, c(\"GPSLontitude\", \"GPSLatitude\")])\nobs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]\npmSP = SpatialPoints(obs_loc)\npmTM = sort(unique(samp_dat$date))\n\n# handle data set in st format\nlong_dat1 = melt(samp_dat, id.vars = c(\"GPSLontitude\", \"GPSLatitude\", \"date\"))\nwide_dat1 = dcast(long_dat1, GPSLontitude + GPSLatitude + variable ~ date, value.var=\"value\")\nlong_dat2 = melt(wide_dat1, id.vars = c(\"GPSLontitude\", \"GPSLatitude\", \"variable\"), variable.name = \"date\")\nst_dat = dcast(long_dat2, date + GPSLontitude + GPSLatitude ~ variable, value.var=\"value\")\n# the above manipulation messes the data type !!!\nst_dat$date = as.Date(st_dat$date)\nfor (colm in c(\"co\",\"pm10\",\"so2\",\"pm25\",\"no2\")){\n    st_dat[, colm] = as.numeric(st_dat[, colm])\n}\nnrow(st_dat)\n\n# create kriging data set for pm2.5\npm25_dat = st_dat[, \"pm25\", drop=FALSE]\npmDF = STFDF(sp=pmSP, time=pmTM, data=pm25_dat)\nstplot(pmDF, at=pm25_cuts)\n\n# emprical variogram\nvar = variogramST(pm25~1,data=pmDF,tunit=\"days\",assumeRegular=F,na.omit=T) \nplot(var, map=FALSE)\nplot(var, map=TRUE)\nplot(var,wireframe=TRUE) \nStAni = estiStAni(var, c(-100, 10), spatialVgm = vgm(1.6,\"Sph\", 30, 0.1), temporalVgm = vgm(1,\"Sph\", 10, 0.1))\n\n# lower and upper bounds\npars.l = c(sill.s = 0.001, range.s = 0.001, nugget.s = 0.001,sill.t = 0.001, range.t = 1, nugget.t = 0.001,sill.st = 0.001, range.st = 10, nugget.st = 0.001, anis = 0)\npars.u = c(sill.s = 200, range.s = 6000, nugget.s = 100,sill.t = 200, range.t = 5000, nugget.t = 100,sill.st = 200, range.st = 5000, nugget.st = 100,anis = 2) \n\n# model summary\nsummary.StVariogramModel = function(x){\n    message(deparse(substitute(x)))\n    message(attr(x, \"MSE\"))\n    print(x)\n    plot(var, x, map=FALSE)\n}\n\n# separable model\nseparable <- vgmST(\"separable\", space = vgm(1.6,\"Sph\", 30, 0.1), time = vgm(1,\"Sph\", 10, 0.1), sill=1200)\nseparable_Vgm8 <- fit.StVariogram(var, separable, fit.method = 8)\nseparable_Vgm7 <- fit.StVariogram(var, separable, fit.method = 7, stAni = StAni, method = \"L-BFGS-B\", control = list(parscale=c(1,10,1,1,1)), lower = rep(0.0001,7))\nseparable_Vgm6 <- fit.StVariogram(var, separable, fit.method = 6) # default: no weights\n\nlapply(list(separable_Vgm6, separable_Vgm7,separable_Vgm8), summary)\n\n# product sum model\nprodSumModel <- vgmST(\"productSum\", space = vgm(10, \"Exp\", 200, 1), time = vgm(10, \"Sph\", 2, 1), k = 2)\nps_Vgm8 = fit.StVariogram(var, prodSumModel, fit.method = 8)\nps_Vgm7 = fit.StVariogram(var, prodSumModel, fit.method = 7, stAni = StAni, method = \"L-BFGS-B\", control = list(parscale=c(1,10,1,1,0.1,1,10)), lower = rep(0.0001,7))\nps_Vgm6 = fit.StVariogram(var, prodSumModel, fit.method = 6, method = \"L-BFGS-B\", control = list(parscale=c(1,10,1,1,0.1,1,10)), lower = rep(0.0001,7))\n\nlapply(list(ps_Vgm6,ps_Vgm7,ps_Vgm8), summary)\n\n# Decision: to use unweighted least square\n# more complicated model: sum metric family\nSimplesumMetric <- vgmST(\"simpleSumMetric\",space = vgm(1200,\"Sph\", 30, 0.1),\n                         time = vgm(500,\"Sph\", 10, 0.1), \n                         joint = vgm(1,\"Sph\", 500, 0), nugget=1000, stAni=StAni) \nplot(var, SimplesumMetric, map=FALSE)\nSimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = \"L-BFGS-B\",lower=pars.l)\nsummary(SimplesumMetric_Vgm)\n# fully fledged sum metric does not work: optimization failed\n## NOT RUN:\nsumMetric <- vgmST(\"sumMetric\", space = SimplesumMetric_Vgm$space,\n                   time = SimplesumMetric_Vgm$time, \n                   joint = SimplesumMetric_Vgm$joint, stAni=103.5) \nplot(var, sumMetric, map=FALSE)\nscl = c(1, 0.1, 1, 1, 0.1, 1, 1, 0.1, 1, 1)\n# sm_Vgm = fit.StVariogram(var, sumMetric, fit.method = 6, method = \"L-BFGS-B\", lower = pars.l, upper = pars.u)\n# summary(sm_Vgm)\n\n\n",
    "created" : 1450655791302.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3831130885",
    "id" : "B29820BE",
    "lastKnownWriteTime" : 1450744496,
    "path" : "~/Projects/pm25/PM25/analysis/krigging.R",
    "project_path" : "krigging.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}