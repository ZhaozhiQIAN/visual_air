{
    "contents" : "# create a sampling grid\n# library(raster) # crop\n# x.grid = seq(mydat@bbox[1,1], mydat@bbox[1,2], by = 0.1)\n# y.grid = seq(mydat@bbox[2,1], mydat@bbox[2,2], by = 0.1)\n# y2 = rep(y.grid, rep.int(length(x.grid), length(y.grid)))\n# x2 = rep(x.grid, times = ceiling(length(y2)/length(x.grid)))\n# samp_grid = SpatialPoints(data.frame(x = x2, y = y2))\n\n# create a sampling grid\n## spatial component\nsps = spsample(mydat, 5000, type=\"regular\")\n## temporarl component\ntms = seq(as.Date(\"2015-11-29\"), as.Date(\"2015-12-3\"), length.out = 5)\n## combine\ngrid.st = STF(sps, tms)\n\n# visualize a random function on the map\nxyz.func<-function(x,y) {\n    x = (x - min(x))/(max(x) - min(x)) * 11 + 1\n    y = (y - min(y))/(max(y) - min(y)) * 11 + 1\n    -10.4+6.53*x+6.53*y-0.167*x^2-0.167*y^2+0.0500*x*y\n}\nvisual_sps = data.frame(long = sps$x1, lat = sps$x2, val = xyz.func(sps$x1, sps$x2))\nbrks <- cut(visual_sps$val,breaks=9) # (start,end]\nbrks <- gsub(\",\",\" - \",brks,fixed=TRUE)   # (start - end]\nvisual_sps$brks <- gsub(\"\\\\(|\\\\]\",\"\",brks)        # start - end\n\nlibrary(RColorBrewer)\nvis_contour = ggplot() +\n    geom_polygon(data = fortify(mydat), aes(x = long, y = lat, group = id), colour = \"black\",fill = \"white\") +\n    geom_tile(data = visual_sps, aes(x = long, y = lat, fill=brks, alpha=0.3)) +\n    scale_fill_manual(\"Z\",values=brewer.pal(9,\"YlOrRd\")) +\n    scale_x_continuous(expand=c(0,0)) +\n    scale_y_continuous(expand=c(0,0)) +\n    coord_map()\nvis_contour\n\n# get fitted values\npred = krigeST(pm25 ~ 1, data=pmDF, modelList = SimplesumMetric_Vgm, newdata=grid.st)\nstplot(pred) \nclass(pred)\nstr(pred)\n# create factor manually\nbrks <- cut(pred@data$var1.pred, breaks=pm25_cuts_stplot)\npred_cp = pred\npred_cp@data$var1.pred = brks\nstplot(pred_cp, animate = 0.5)\n\n# visualize fitted value\ntime.split = function(pred_df){\n    df_whole = cbind(as.data.frame(pred_df@sp@coords), pred_df@data)\n    names(df_whole) = c(\"long\", \"lat\", \"val\")\n    brks <- cut(df_whole$val, breaks=pm25_cuts, labels=pm25_labels)\n    df_whole$brks <- brks\n    # padding_df = data.frame(long=rep(0, 6), lat=rep(0,6), val = rep(0,6), brks = factor(1:6, labels=pm25_labels))\n    df_lst = list()\n    cuk_size = nrow(df_whole) / length(pred_df@endTime)\n    for (i in 1:length(pred_df@endTime)){\n        df_lst[[i]] = df_whole[ (1+cuk_size*(i-1)) : (cuk_size*i), ]\n        attr(df_lst[[i]], \"Date\") = (as.Date(pred_df@endTime) - 1)[i]\n    }\n    df_lst\n}\npred_lst = time.split(pred)\n\noneday = join_dat[join_dat$date==\"2015-9-1\", ]\n\nviso_gen = function(base_plot, showOBS = TRUE, write_png=FALSE){\n    eval(base_plot)\n    viso = function(pred_df){\n        vis = base_plot + \n            geom_point(data = pred_df, aes(x = long, y = lat, col=brks), alpha=0.4, size=4, shape=15L) +\n            ggtitle(attr(pred_df, \"Date\")) \n        if (showOBS)\n            vis = vis+ geom_point(data=oneday, aes(x=GPSLontitude, y=GPSLatitude), colour = \"black\", shape=3) \n        if (write_png){\n            library(png)\n            # png(filename=paste(attr(pred_df, \"Date\"),\".png\", sep=\"\"), width=800, height=600)\n            jpeg(filename=paste(attr(pred_df, \"Date\"),\".jpeg\", sep=\"\"), width=800, height=600)\n            print(vis)\n            dev.off()\n        }\n    }\n    viso\n}\n\npm25_col = brewer.pal(6,\"YlOrRd\")\nnames(pm25_col) = pm25_labels\n\n\n \nbase_plot = ggplot() + \n    geom_polygon(data = fortify(mydat), aes(x = long, y = lat, group = id), colour = \"black\",fill = \"white\") +\n    scale_colour_manual(\"PM 2.5\",values=pm25_col) +\n    scale_x_continuous(expand=c(0,0)) +\n    scale_y_continuous(expand=c(0,0)) +\n    coord_map()\n\nviso_base = viso_gen(base_plot, write_png=TRUE)\nlapply(pred_lst[1:5], viso_base)\n\n\n",
    "created" : 1450720646472.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1906966027",
    "id" : "6D94ADD6",
    "lastKnownWriteTime" : 1451219547,
    "path" : "~/Projects/pm25/PM25/analysis/predict.R",
    "project_path" : "predict.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}