{
    "contents" : "\n# tidy up data\nTidyDat = function(dat, sp, tm, var_id){\n    # handle data set in st format\n    long_dat1 = melt(dat, id.vars = c(\"GPSLontitude\", \"GPSLatitude\", \"date\"))\n    wide_dat1 = dcast(long_dat1, GPSLontitude + GPSLatitude + variable ~ date, value.var=\"value\")\n    long_dat2 = melt(wide_dat1, id.vars = c(\"GPSLontitude\", \"GPSLatitude\", \"variable\"), variable.name = \"date\")\n    st_dat = dcast(long_dat2, date + GPSLontitude + GPSLatitude ~ variable, value.var=\"value\")\n    # the above manipulation messes the data type !!!\n    st_dat$date = as.Date(st_dat$date)\n    for (colm in c(\"co\",\"pm10\",\"so2\",\"pm25\",\"no2\")){\n        st_dat[, colm] = as.numeric(st_dat[, colm])\n    }\n    dat = st_dat[, var_id, drop=FALSE]\n    pmDF_train = STFDF(sp=sp, time=tm, data=dat)\n    pmDF_train\n}\n\n# take a sample of data and try to fit kriging model: one month\n# eval_dat_whole = join_dat[(join_dat$date > as.Date(\"2015-8-31\")) & (join_dat$date < as.Date(\"2015-12-1\")), ]\n\neval_dat_whole = join_dat[(join_dat$date > as.Date(\"2015-11-1\")) & (join_dat$date < as.Date(\"2015-12-1\")), ]\n\n# sample location of observertory\n# use all time of observation\nobs_loc = unique(eval_dat_whole[, c(\"GPSLontitude\", \"GPSLatitude\")])\nobs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]\nsample_ind_perm = sample(nrow(obs_loc), nrow(obs_loc))\ninds = ceiling(seq(0, nrow(obs_loc), length.out = 11))\nobs_sample_ind = list()\nfor (i in 1:10){\n    obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]\n}\n\n\n\n\nOneFold = function(obs_sample_ind){\n    # obs_sample_ind = sample(nrow(obs_loc), floor(0.8 * nrow(obs_loc)))\n    obs_loc_train = obs_loc[-obs_sample_ind, ]\n    obs_loc_test = obs_loc[obs_sample_ind, ]\n    eval_train = merge(eval_dat_whole, obs_loc_train, by = c(\"GPSLontitude\", \"GPSLatitude\"))\n    eval_test = merge(eval_dat_whole, obs_loc_test, by = c(\"GPSLontitude\", \"GPSLatitude\"))\n    pmSP_train = SpatialPoints(obs_loc_train)\n    pmSP_test = SpatialPoints(obs_loc_test)\n    pmTM_train = sort(unique(eval_dat_whole$date)) \n    pmTM_test = sort(unique(eval_dat_whole$date)) \n    test_grid = STF(pmSP_test, pmTM_test)\n    \n    pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,\"pm25\")\n    pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, \"pm25\")\n    \n    var = variogramST(pm25~1, data=pmDF_train, assumeRegular=F, na.omit=T, progress = FALSE) \n    StAni = estiStAni(var, c(-100, 10), spatialVgm=vgm(1.6,\"Gau\", 30, 0.1), temporalVgm=vgm(1,\"Spl\", 10, 0.1))\n    \n    pars.l = c(sill.s=0.001, range.s=0.001, nugget.s=0.001, sill.t=0.001, range.t=1, nugget.t=0.001, sill.st=0.001, range.st=10, nugget.st=0.001, anis=0)\n    pars.u = c(sill.s=10000, range.s=10, nugget.s=1000, sill.t=10000, range.t=15, nugget.t=1000, sill.st=1000, range.st=1000, nugget.st=1000, anis=1000)\n    \n    SimplesumMetric <- vgmST(\"simpleSumMetric\",space = vgm(1200, \"Gau\", 30, 0.1),\n                             time = vgm(500,\"Spl\", 10, 0.1), \n                             joint = vgm(1,\"Gau\", 500, 0), nugget=1000, stAni=1) \n    \n    \n    SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = \"L-BFGS-B\",lower=pars.l, upper=pars.u,fit.method = 8)\n    \n    # separable <- vgmST(\"separable\", space = vgm(1.6,\"Sph\", 30, 0.1), time = vgm(1,\"Sph\", 10, 0.1), sill=1200)\n    # separable_Vgm <- fit.StVariogram(var, separable, fit.method = 6)\n    \n    pred_test = krigeST(pm25 ~ 1, data=pmDF_train, modelList = SimplesumMetric_Vgm, newdata=pmDF_test)\n    \n    ref = mean(abs(unlist(pmDF_test@data) - mean(unlist(pmDF_train@data))))\n    mod = mean(abs(unlist((pred_test@data - pmDF_test@data))), na.rm=T)\n    \n    library(caret)\n    fac_ref <- cut(pmDF_test@data[,], breaks=pm25_cuts, labels=pm25_labels)\n    fac_prd = cut(pred_test@data[,], breaks=pm25_cuts, labels=pm25_labels)\n    con_mat = confusionMatrix(fac_prd, fac_ref)\n    list(con_mat, ref, mod, pmDF_test, pred_test)\n}\n\n\nmad = lapply(obs_sample_ind, OneFold)\ndif = sapply(mad, function(x) x[[2]] - x[[3]])  # big is good\nt.test(dif)\n\n\nlibrary(parallel)\nmad = mclapply(obs_sample_ind, OneFold, mc.preschedule = FALSE, mc.cores = 2)\nmad\n\n# cross validation: MAD is 20\nmean(abs(eval_dat_whole$pm25 - mean(eval_dat_whole$pm25)))\n\n# residual\nres = OneFold(obs_sample_ind[[2]])\n\nres[[1]]\nres[[2]] # reference\nres[[3]] # model\n\npred_res_df = res[[4]]\nobs_res_df = res[[3]]\n\npred_res_df@data = cbind(pred = pred_res_df@data, true = obs_res_df@data, res = pred_res_df@data - obs_res_df@data)\nnames(pred_res_df@data) = c(\"pred\", \"true\", \"res\")\npred_res_df@data$res = abs(pred_res_df@data$res)\nstr(pred_res_df)\n\n\ntime.split_res = function(pred_df){\n    df_whole = cbind(as.data.frame(pred_df@sp@coords), pred_df@data)\n    names(df_whole) = c(\"long\", \"lat\", \"pred\", \"true\", \"res\")\n    df_lst = list()\n    cuk_size = nrow(df_whole) / length(pred_df@endTime)\n    for (i in 1:length(pred_df@endTime)){\n        df_lst[[i]] = df_whole[ (1+cuk_size*(i-1)) : (cuk_size*i), ]\n    }\n    df_lst\n}\n\npred_res_lst = time.split_res(pred_res_df)\n\nviso_gen_res = function(base_plot, showOBS = TRUE){\n    eval(base_plot)\n    viso = function(pred_df){\n        vis = base_plot + geom_point(data = pred_df, aes(x = long, y = lat, size=res))\n        if (showOBS)\n            vis = vis+ geom_point(data=oneday, aes(x=GPSLontitude, y=GPSLatitude), colour = \"black\", shape=3) \n        \n        vis\n    }\n    viso\n}\n\nviso_res_base = viso_gen_res(base_plot)\nlapply(pred_res_lst, viso_res_base)\n\nbase_plot + geom_point(data = pred_res_lst[[1]], aes(x = long, y = lat, size=res))\n\n\nhead(with(join_dat, join_dat[(date > as.Date(\"2015-8-1\")) & (date < as.Date(\"2015-12-1\")) & pm25 >250,] ))\n\n\n\n\n\n\n",
    "created" : 1451046299176.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3134308454",
    "id" : "C2FE4DF8",
    "lastKnownWriteTime" : 1451232558,
    "path" : "~/Projects/pm25/PM25/analysis/validation.R",
    "project_path" : "validation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}