names(pm25_col) = pm25_labels
# take a sample of data and try to fit kriging model: one month
samp_dat = join_dat[(join_dat$date > as.Date("2015-10-31")) & (join_dat$date < as.Date("2015-12-1")), ]
# location of observertory, time of observation
obs_loc = unique(samp_dat[, c("GPSLontitude", "GPSLatitude")])
obs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]
pmSP = SpatialPoints(obs_loc)
pmTM = sort(unique(samp_dat$date))
# handle data set in st format
long_dat1 = melt(samp_dat, id.vars = c("GPSLontitude", "GPSLatitude", "date"))
wide_dat1 = dcast(long_dat1, GPSLontitude + GPSLatitude + variable ~ date, value.var="value")
long_dat2 = melt(wide_dat1, id.vars = c("GPSLontitude", "GPSLatitude", "variable"), variable.name = "date")
st_dat = dcast(long_dat2, date + GPSLontitude + GPSLatitude ~ variable, value.var="value")
# the above manipulation messes the data type !!!
st_dat$date = as.Date(st_dat$date)
for (colm in c("co","pm10","so2","pm25","no2")){
st_dat[, colm] = as.numeric(st_dat[, colm])
}
nrow(st_dat)
# create kriging data set for pm2.5
pm25_dat = st_dat[, "pm25", drop=FALSE]
pmDF = STFDF(sp=pmSP, time=pmTM, data=pm25_dat)
stplot(pmDF, at=pm25_cuts)
# emprical variogram
var = variogramST(pm25~1,data=pmDF,tunit="days",assumeRegular=F,na.omit=T)
plot(var, map=FALSE)
plot(var, map=TRUE)
plot(var,wireframe=TRUE)
StAni = estiStAni(var, c(-100, 10), spatialVgm = vgm(1.6,"Sph", 30, 0.1), temporalVgm = vgm(1,"Sph", 10, 0.1))
# lower and upper bounds
pars.l = c(sill.s = 0.001, range.s = 0.001, nugget.s = 0.001,sill.t = 0.001, range.t = 1, nugget.t = 0.001,sill.st = 0.001, range.st = 10, nugget.st = 0.001, anis = 0)
pars.u = c(sill.s = 200, range.s = 6000, nugget.s = 100,sill.t = 200, range.t = 5000, nugget.t = 100,sill.st = 200, range.st = 5000, nugget.st = 100,anis = 2)
# model summary
summary.StVariogramModel = function(x){
message(deparse(substitute(x)))
message(attr(x, "MSE"))
print(x)
plot(var, x, map=FALSE)
}
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200,"Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=StAni)
plot(var, SimplesumMetric, map=FALSE)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
summary(SimplesumMetric_Vgm)
pred = krigeST(pm25 ~ 1, data=pmDF, modelList = SimplesumMetric_Vgm, newdata=grid.st)
stplot(pred)
class(pred)
str(pred)
# create factor manually
brks <- cut(pred@data$var1.pred, breaks=pm25_cuts_stplot)
pred_cp = pred
pred_cp@data$var1.pred = brks
stplot(pred_cp, animate = 0.5)
# visualize fitted value
time.split = function(pred_df){
df_whole = cbind(as.data.frame(pred_df@sp@coords), pred_df@data)
names(df_whole) = c("long", "lat", "val")
brks <- cut(df_whole$val, breaks=pm25_cuts, labels=pm25_labels)
df_whole$brks <- brks
# padding_df = data.frame(long=rep(0, 6), lat=rep(0,6), val = rep(0,6), brks = factor(1:6, labels=pm25_labels))
df_lst = list()
cuk_size = nrow(df_whole) / length(pred_df@endTime)
for (i in 1:length(pred_df@endTime)){
df_lst[[i]] = df_whole[ (1+cuk_size*(i-1)) : (cuk_size*i), ]
}
df_lst
}
pred_lst = time.split(pred)
oneday = join_dat[join_dat$date=="2015-9-1", ]
viso_gen = function(base_plot, showOBS = TRUE){
eval(base_plot)
viso = function(pred_df){
vis = base_plot + geom_point(data = pred_df, aes(x = long, y = lat, col=brks), alpha=0.4, size=4, shape=15L)
if (showOBS)
vis = vis+ geom_point(data=oneday, aes(x=GPSLontitude, y=GPSLatitude), colour = "black", shape=3)
vis
}
viso
}
pm25_col = brewer.pal(6,"YlOrRd")
names(pm25_col) = pm25_labels
base_plot = ggplot() +
geom_polygon(data = fortify(mydat), aes(x = long, y = lat, group = id), colour = "black",fill = "white") +
scale_colour_manual("PM 2.5",values=pm25_col) +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
coord_map()
viso_base = viso_gen(base_plot)
lapply(pred_lst, viso_base)
length(less_city)
unique(less_city)
unique(join_dat$city)
class(obs_loc)
?sample
obs_sample_ind = sample(nrow(obs_loc), floor(0.8 * nrow(obs_loc)))
obs_loc_train = obs_loc[obs_sample_ind, ]
obs_loc_test = obs_loc[-obs_sample_ind, ]
?merge
eval_train = merge(eval_dat_whole, obs_loc_train, by = c("GPSLontitude", "GPSLatitude"))
eval_dat_whole = join_dat[(join_dat$date > as.Date("2015-10-31")) & (join_dat$date < as.Date("2015-12-1")), ]
eval_train = merge(eval_dat_whole, obs_loc_train, by = c("GPSLontitude", "GPSLatitude"))
eval_test = merge(eval_dat_whole, obs_loc_test, by = c("GPSLontitude", "GPSLatitude"))
pmSP_train = SpatialPoints(obs_loc_train)
pmTM_train = sort(unique(eval_dat_whole$date))
# handle data set in st format
long_dat1 = melt(eval_train, id.vars = c("GPSLontitude", "GPSLatitude", "date"))
wide_dat1 = dcast(long_dat1, GPSLontitude + GPSLatitude + variable ~ date, value.var="value")
long_dat2 = melt(wide_dat1, id.vars = c("GPSLontitude", "GPSLatitude", "variable"), variable.name = "date")
st_dat = dcast(long_dat2, date + GPSLontitude + GPSLatitude ~ variable, value.var="value")
# the above manipulation messes the data type !!!
st_dat$date = as.Date(st_dat$date)
for (colm in c("co","pm10","so2","pm25","no2")){
st_dat[, colm] = as.numeric(st_dat[, colm])
}
pm25_train = st_dat[, "pm25", drop=FALSE]
pmDF_train = STFDF(sp=pmSP_train, time=pmTM_train, data=pm25_train)
var = variogramST(pm25~1,data=pmDF_train,tunit="days",assumeRegular=F,na.omit=T)
warnings()
stplot(var)
plot(var)
plot(var, map=FALSE)
StAni = estiStAni(var, c(-100, 10), spatialVgm = vgm(1.6,"Sph", 30, 0.1), temporalVgm = vgm(1,"Sph", 10, 0.1))
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200,"Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=StAni)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
StAni
plot(SimplesumMetric_Vgm, var, map=F)
plot(SimplesumMetric_Vgm, map=F)
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200,"Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=1)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
plot(SimplesumMetric_Vgm, map=F)
summary(SimplesumMetric_Vgm)
TidyDat = function(dat, var_id){
# handle data set in st format
long_dat1 = melt(dat, id.vars = c("GPSLontitude", "GPSLatitude", "date"))
wide_dat1 = dcast(long_dat1, GPSLontitude + GPSLatitude + variable ~ date, value.var="value")
long_dat2 = melt(wide_dat1, id.vars = c("GPSLontitude", "GPSLatitude", "variable"), variable.name = "date")
st_dat = dcast(long_dat2, date + GPSLontitude + GPSLatitude ~ variable, value.var="value")
# the above manipulation messes the data type !!!
st_dat$date = as.Date(st_dat$date)
for (colm in c("co","pm10","so2","pm25","no2")){
st_dat[, colm] = as.numeric(st_dat[, colm])
}
pm25_train = st_dat[, var_id, drop=FALSE]
pmDF_train = STFDF(sp=pmSP_train, time=pmTM_train, data=pm25_train)
pmDF_train
}
pmDF_train = TidyDat(eval_train, "pm25")
var = variogramST(pm25~1,data=pmDF_train,tunit="days",assumeRegular=F,na.omit=T)
plot(var, map=FALSE)
StAni = estiStAni(var, c(-100, 10), spatialVgm = vgm(1.6,"Sph", 30, 0.1), temporalVgm = vgm(1,"Sph", 10, 0.1))
pars.l = c(sill.s = 0.001, range.s = 0.001, nugget.s = 0.001,sill.t = 0.001, range.t = 1, nugget.t = 0.001,sill.st = 0.001, range.st = 10, nugget.st = 0.001, anis = 0)
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200,"Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=1)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
summary(SimplesumMetric_Vgm)
pmSP_test = SpatialPoints(obs_loc_test)
pmTM_test = sort(unique(eval_dat_whole$date))
test_grid = grid.st = STF(pmSP_test, pmTM_test)
pred_test = krigeST(pm25 ~ 1, data=pmDF_train, modelList = SimplesumMetric_Vgm, newdata=test_grid)
predict(pred_test)
str(pred_test)
class(pmDF_train)
pmDF_test = TidyDat(eval_test, "pm25")
TidyDat = function(dat, sp, tm, var_id){
# handle data set in st format
long_dat1 = melt(dat, id.vars = c("GPSLontitude", "GPSLatitude", "date"))
wide_dat1 = dcast(long_dat1, GPSLontitude + GPSLatitude + variable ~ date, value.var="value")
long_dat2 = melt(wide_dat1, id.vars = c("GPSLontitude", "GPSLatitude", "variable"), variable.name = "date")
st_dat = dcast(long_dat2, date + GPSLontitude + GPSLatitude ~ variable, value.var="value")
# the above manipulation messes the data type !!!
st_dat$date = as.Date(st_dat$date)
for (colm in c("co","pm10","so2","pm25","no2")){
st_dat[, colm] = as.numeric(st_dat[, colm])
}
pm25_train = st_dat[, var_id, drop=FALSE]
pmDF_train = STFDF(sp=sp, time=tm, data=dat)
pmDF_train
}
pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,"pm25")
pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, "pm25")
str(pmDF_test)
TidyDat = function(dat, sp, tm, var_id){
# handle data set in st format
long_dat1 = melt(dat, id.vars = c("GPSLontitude", "GPSLatitude", "date"))
wide_dat1 = dcast(long_dat1, GPSLontitude + GPSLatitude + variable ~ date, value.var="value")
long_dat2 = melt(wide_dat1, id.vars = c("GPSLontitude", "GPSLatitude", "variable"), variable.name = "date")
st_dat = dcast(long_dat2, date + GPSLontitude + GPSLatitude ~ variable, value.var="value")
# the above manipulation messes the data type !!!
st_dat$date = as.Date(st_dat$date)
for (colm in c("co","pm10","so2","pm25","no2")){
st_dat[, colm] = as.numeric(st_dat[, colm])
}
dat = st_dat[, var_id, drop=FALSE]
pmDF_train = STFDF(sp=sp, time=tm, data=dat)
pmDF_train
}
pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,"pm25")
var = variogramST(pm25~1,data=pmDF_train,tunit="days",assumeRegular=F,na.omit=T)
plot(var, map=FALSE)
pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, "pm25")
str(pmDF_test)
str(pred_test)
pred_test - pmDF_test
sum(pred_test@data - pmDF_test@data)
mean( (pred_test@data - pmDF_test@data)^2)
sqrt(mean((pred_test@data - pmDF_test@data)^2))
mean(abs(pred_test@data - pmDF_test@data))
mean(abs(unlist((pred_test@data - pmDF_test@data)))
)
source('~/Projects/pm25/PM25/analysis/validation.R')
?variogramST
interactive()
nrow(obs_loc)
seq(1, nrow(obs_loc), 9)
seq(1, nrow(obs_loc), length.out = 10)
floor(seq(1, nrow(obs_loc), length.out = 10))
ceiling(seq(1, nrow(obs_loc), length.out = 10))
seq(0, nrow(obs_loc), length.out = 10)
ceiling(seq(0, nrow(obs_loc), length.out = 10))
inds = ceiling(seq(0, nrow(obs_loc), length.out = 10))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
sample_ind_perm = sample(nrow(obs_loc), nrow(obs_loc))
inds = ceiling(seq(0, nrow(obs_loc), length.out = 10))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
for (i in 1:9){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
inds[10]
inds = ceiling(seq(0, nrow(obs_loc), length.out = 11))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
obs_sample_ind
for (i in 1:10){
obs_sample_ind = sample(nrow(obs_loc), floor(0.8 * nrow(obs_loc)))
obs_loc_train = obs_loc[obs_sample_ind[[i]], ]
obs_loc_test = obs_loc[-obs_sample_ind[[i]], ]
eval_train = merge(eval_dat_whole, obs_loc_train, by = c("GPSLontitude", "GPSLatitude"))
eval_test = merge(eval_dat_whole, obs_loc_test, by = c("GPSLontitude", "GPSLatitude"))
pmSP_train = SpatialPoints(obs_loc_train)
pmSP_test = SpatialPoints(obs_loc_test)
pmTM_train = sort(unique(eval_dat_whole$date))
pmTM_test = sort(unique(eval_dat_whole$date))
test_grid = grid.st = STF(pmSP_test, pmTM_test)
pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,"pm25")
pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, "pm25")
var = variogramST(pm25~1, data=pmDF_train, tunit="days", assumeRegular=F, na.omit=T, progress = FALSE)
StAni = estiStAni(var, c(-100, 10), spatialVgm=vgm(1.6,"Sph", 30, 0.1), temporalVgm=vgm(1,"Sph", 10, 0.1))
pars.l = c(sill.s=0.001, range.s=0.001, nugget.s=0.001, sill.t=0.001, range.t=1, nugget.t=0.001, sill.st=0.001, range.st=10, nugget.st=0.001, anis=0)
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200, "Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=1)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
pred_test = krigeST(pm25 ~ 1, data=pmDF_train, modelList = SimplesumMetric_Vgm, newdata=test_grid)
message(mean(abs(unlist((pred_test@data - pmDF_test@data)))))
}
i
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
for (i in 1:10){
# obs_sample_ind = sample(nrow(obs_loc), floor(0.8 * nrow(obs_loc)))
obs_loc_train = obs_loc[obs_sample_ind[[i]], ]
obs_loc_test = obs_loc[-obs_sample_ind[[i]], ]
eval_train = merge(eval_dat_whole, obs_loc_train, by = c("GPSLontitude", "GPSLatitude"))
eval_test = merge(eval_dat_whole, obs_loc_test, by = c("GPSLontitude", "GPSLatitude"))
pmSP_train = SpatialPoints(obs_loc_train)
pmSP_test = SpatialPoints(obs_loc_test)
pmTM_train = sort(unique(eval_dat_whole$date))
pmTM_test = sort(unique(eval_dat_whole$date))
test_grid = grid.st = STF(pmSP_test, pmTM_test)
pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,"pm25")
pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, "pm25")
var = variogramST(pm25~1, data=pmDF_train, tunit="days", assumeRegular=F, na.omit=T, progress = FALSE)
StAni = estiStAni(var, c(-100, 10), spatialVgm=vgm(1.6,"Sph", 30, 0.1), temporalVgm=vgm(1,"Sph", 10, 0.1))
pars.l = c(sill.s=0.001, range.s=0.001, nugget.s=0.001, sill.t=0.001, range.t=1, nugget.t=0.001, sill.st=0.001, range.st=10, nugget.st=0.001, anis=0)
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200, "Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=1)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
pred_test = krigeST(pm25 ~ 1, data=pmDF_train, modelList = SimplesumMetric_Vgm, newdata=test_grid)
message(mean(abs(unlist((pred_test@data - pmDF_test@data)))))
}
warning()
warnings()
var = variogramST(pm25~1, data=pmDF_train, tunit="days", assumeRegular=F, na.omit=T, progress = FALSE)
warnings()
var = variogramST(pm25~1, data=pmDF_train, assumeRegular=F, na.omit=T, progress = FALSE)
plot(var)
plot(var, map=FALSE)
?mclapply
library(parallel)
?mclapply
OneFold = function(obs_sample_ind){
# obs_sample_ind = sample(nrow(obs_loc), floor(0.8 * nrow(obs_loc)))
obs_loc_train = obs_loc[obs_sample_ind, ]
obs_loc_test = obs_loc[-obs_sample_ind, ]
eval_train = merge(eval_dat_whole, obs_loc_train, by = c("GPSLontitude", "GPSLatitude"))
eval_test = merge(eval_dat_whole, obs_loc_test, by = c("GPSLontitude", "GPSLatitude"))
pmSP_train = SpatialPoints(obs_loc_train)
pmSP_test = SpatialPoints(obs_loc_test)
pmTM_train = sort(unique(eval_dat_whole$date))
pmTM_test = sort(unique(eval_dat_whole$date))
test_grid = grid.st = STF(pmSP_test, pmTM_test)
pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,"pm25")
pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, "pm25")
var = variogramST(pm25~1, data=pmDF_train, assumeRegular=F, na.omit=T, progress = FALSE)
StAni = estiStAni(var, c(-100, 10), spatialVgm=vgm(1.6,"Sph", 30, 0.1), temporalVgm=vgm(1,"Sph", 10, 0.1))
pars.l = c(sill.s=0.001, range.s=0.001, nugget.s=0.001, sill.t=0.001, range.t=1, nugget.t=0.001, sill.st=0.001, range.st=10, nugget.st=0.001, anis=0)
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200, "Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=1)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
pred_test = krigeST(pm25 ~ 1, data=pmDF_train, modelList = SimplesumMetric_Vgm, newdata=test_grid)
mean(abs(unlist((pred_test@data - pmDF_test@data))))
}
OneFold(obs_sample_ind[[1]])
library(parallel)
mad = mclapply(obs_sample_ind, OneFold, mc.preschedule = FALSE, mc.cores = 4)
mad
eval_dat_whole = join_dat[(join_dat$date > as.Date("2015-8-31")) & (join_dat$date < as.Date("2015-12-1")), ]
mad = mclapply(obs_sample_ind, OneFold, mc.preschedule = FALSE, mc.cores = 4)
mad = mclapply(obs_sample_ind, OneFold, mc.preschedule = FALSE, mc.cores = 4)
mad
obs_loc = unique(eval_dat_whole[, c("GPSLontitude", "GPSLatitude")])
obs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]
sample_ind_perm = sample(nrow(obs_loc), nrow(obs_loc))
inds = ceiling(seq(0, nrow(obs_loc), length.out = 11))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
OneFold(obs_sample_ind[[2]])
obs_loc_train = obs_loc[obs_sample_ind[[2]], ]
obs_loc_test = obs_loc[-obs_sample_ind[[2]], ]
eval_train = merge(eval_dat_whole, obs_loc_train, by = c("GPSLontitude", "GPSLatitude"))
eval_test = merge(eval_dat_whole, obs_loc_test, by = c("GPSLontitude", "GPSLatitude"))
pmSP_train = SpatialPoints(obs_loc_train)
pmSP_test = SpatialPoints(obs_loc_test)
pmTM_train = sort(unique(eval_dat_whole$date))
pmTM_test = sort(unique(eval_dat_whole$date))
test_grid = grid.st = STF(pmSP_test, pmTM_test)
pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,"pm25")
pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, "pm25")
var = variogramST(pm25~1, data=pmDF_train, assumeRegular=F, na.omit=T, progress = FALSE)
plot(var)
plot(var, map=F)
pars.l = c(sill.s=0.001, range.s=0.001, nugget.s=0.001, sill.t=0.001, range.t=1, nugget.t=0.001, sill.st=0.001, range.st=10, nugget.st=0.001, anis=0)
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200, "Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=1)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
summary(SimplesumMetric_Vgm)
pred_test = krigeST(pm25 ~ 1, data=pmDF_train, modelList = SimplesumMetric_Vgm, newdata=test_grid)
unlist((pred_test@data - pmDF_test@data))
mean(abs(unlist((pred_test@data - pmDF_test@data))))
mean(abs(unlist((pred_test@data - pmDF_test@data))), na.rm=T)
which(pred_test@data==NA)
which(pmDF_test@data==NA)
which(unlist(pmDF_test@data)==NA)
which(unlist(pred_test@data)==NA)
which(is.na(unlist((pred_test@data - pmDF_test@data))))
which(is.na(unlist((pred_test@data))))
which(is.na(unlist((pmDF_test@data))))
OneFold = function(obs_sample_ind){
# obs_sample_ind = sample(nrow(obs_loc), floor(0.8 * nrow(obs_loc)))
obs_loc_train = obs_loc[obs_sample_ind, ]
obs_loc_test = obs_loc[-obs_sample_ind, ]
eval_train = merge(eval_dat_whole, obs_loc_train, by = c("GPSLontitude", "GPSLatitude"))
eval_test = merge(eval_dat_whole, obs_loc_test, by = c("GPSLontitude", "GPSLatitude"))
pmSP_train = SpatialPoints(obs_loc_train)
pmSP_test = SpatialPoints(obs_loc_test)
pmTM_train = sort(unique(eval_dat_whole$date))
pmTM_test = sort(unique(eval_dat_whole$date))
test_grid = grid.st = STF(pmSP_test, pmTM_test)
pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,"pm25")
pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, "pm25")
var = variogramST(pm25~1, data=pmDF_train, assumeRegular=F, na.omit=T, progress = FALSE)
StAni = estiStAni(var, c(-100, 10), spatialVgm=vgm(1.6,"Sph", 30, 0.1), temporalVgm=vgm(1,"Sph", 10, 0.1))
pars.l = c(sill.s=0.001, range.s=0.001, nugget.s=0.001, sill.t=0.001, range.t=1, nugget.t=0.001, sill.st=0.001, range.st=10, nugget.st=0.001, anis=0)
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200, "Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=1)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
pred_test = krigeST(pm25 ~ 1, data=pmDF_train, modelList = SimplesumMetric_Vgm, newdata=test_grid)
mean(abs(unlist((pred_test@data - pmDF_test@data))), na.rm=T)
}
OneFold(sample_ind_perm[[3]])
sample_ind_perm[[3]]
inds = ceiling(seq(0, nrow(obs_loc), length.out = 11))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
OneFold(sample_ind_perm[[3]])
sample_ind_perm[[3]]
inds
obs_loc = unique(eval_dat_whole[, c("GPSLontitude", "GPSLatitude")])
obs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]
sample_ind_perm = sample(nrow(obs_loc), nrow(obs_loc))
sample_ind_perm
inds = ceiling(seq(0, nrow(obs_loc), length.out = 11))
inds
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
obs_sample_ind
OneFold(obs_sample_ind[[3]])
# take a sample of data and try to fit kriging model: one month
eval_dat_whole = join_dat[(join_dat$date > as.Date("2015-8-31")) & (join_dat$date < as.Date("2015-12-1")), ]
# sample location of observertory
# use all time of observation
obs_loc = unique(eval_dat_whole[, c("GPSLontitude", "GPSLatitude")])
obs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]
sample_ind_perm = sample(nrow(obs_loc), nrow(obs_loc))
inds = ceiling(seq(0, nrow(obs_loc), length.out = 11))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
mad = mclapply(obs_sample_ind, OneFold, mc.preschedule = FALSE, mc.cores = 4)
mad
eval_dat_whole = join_dat[(join_dat$date > as.Date("2015-1-1")) & (join_dat$date < as.Date("2015-12-1")), ]
# sample location of observertory
# use all time of observation
obs_loc = unique(eval_dat_whole[, c("GPSLontitude", "GPSLatitude")])
obs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]
sample_ind_perm = sample(nrow(obs_loc), nrow(obs_loc))
inds = ceiling(seq(0, nrow(obs_loc), length.out = 11))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
mad = mclapply(obs_sample_ind, OneFold, mc.preschedule = FALSE, mc.cores = 4)
mad
mad = mclapply(obs_sample_ind, OneFold, mc.preschedule = FALSE, mc.cores = 2)
eval_dat_whole = join_dat[(join_dat$date > as.Date("2015-6-1")) & (join_dat$date < as.Date("2015-12-1")), ]
# sample location of observertory
# use all time of observation
obs_loc = unique(eval_dat_whole[, c("GPSLontitude", "GPSLatitude")])
obs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]
sample_ind_perm = sample(nrow(obs_loc), nrow(obs_loc))
inds = ceiling(seq(0, nrow(obs_loc), length.out = 11))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
mad = mclapply(obs_sample_ind, OneFold, mc.preschedule = FALSE, mc.cores = 4)
mad
OneFold(obs_sample_ind[[1]])
obs_sample_ind[[1]]
a = b=1
a
b
rm(a, b)
mean(unlist(mad))
mean(unlist(mad), na.rm=T)
mean(abs(eval_dat_whole$pm25 - mean(eval_dat_whole$pm25)))
hist(eval_dat_whole$pm25)
mean(abs(eval_dat_whole$pm25 - mean(eval_dat_whole$pm25)))
mean(eval_dat_whole$pm25)
OneFold = function(obs_sample_ind){
# obs_sample_ind = sample(nrow(obs_loc), floor(0.8 * nrow(obs_loc)))
obs_loc_train = obs_loc[-obs_sample_ind, ]
obs_loc_test = obs_loc[obs_sample_ind, ]
eval_train = merge(eval_dat_whole, obs_loc_train, by = c("GPSLontitude", "GPSLatitude"))
eval_test = merge(eval_dat_whole, obs_loc_test, by = c("GPSLontitude", "GPSLatitude"))
pmSP_train = SpatialPoints(obs_loc_train)
pmSP_test = SpatialPoints(obs_loc_test)
pmTM_train = sort(unique(eval_dat_whole$date))
pmTM_test = sort(unique(eval_dat_whole$date))
test_grid = STF(pmSP_test, pmTM_test)
pmDF_train = TidyDat(eval_train, pmSP_train, pmTM_train,"pm25")
pmDF_test = TidyDat(eval_test, pmSP_test, pmTM_test, "pm25")
var = variogramST(pm25~1, data=pmDF_train, assumeRegular=F, na.omit=T, progress = FALSE)
StAni = estiStAni(var, c(-100, 10), spatialVgm=vgm(1.6,"Sph", 30, 0.1), temporalVgm=vgm(1,"Sph", 10, 0.1))
pars.l = c(sill.s=0.001, range.s=0.001, nugget.s=0.001, sill.t=0.001, range.t=1, nugget.t=0.001, sill.st=0.001, range.st=10, nugget.st=0.001, anis=0)
SimplesumMetric <- vgmST("simpleSumMetric",space = vgm(1200, "Sph", 30, 0.1),
time = vgm(500,"Sph", 10, 0.1),
joint = vgm(1,"Sph", 500, 0), nugget=1000, stAni=1)
SimplesumMetric_Vgm <- fit.StVariogram(var, SimplesumMetric,method = "L-BFGS-B",lower=pars.l)
pred_test = krigeST(pm25 ~ 1, data=pmDF_train, modelList = SimplesumMetric_Vgm, newdata=test_grid)
mean(abs(unlist((pred_test@data - pmDF_test@data))), na.rm=T)
}
OneFold(obs_sample_ind[[2]])
eval_dat_whole = join_dat[(join_dat$date > as.Date("2015-9-1")) & (join_dat$date < as.Date("2015-12-1")), ]
# sample location of observertory
# use all time of observation
obs_loc = unique(eval_dat_whole[, c("GPSLontitude", "GPSLatitude")])
obs_loc = obs_loc[order(obs_loc$GPSLontitude, obs_loc$GPSLatitude), ]
sample_ind_perm = sample(nrow(obs_loc), nrow(obs_loc))
inds = ceiling(seq(0, nrow(obs_loc), length.out = 11))
obs_sample_ind = list()
for (i in 1:10){
obs_sample_ind[[i]] = sample_ind_perm[(1 + inds[i]): inds[i+1]]
}
save.image("~/Projects/pm25/PM25/analysis/RData_rm_dup.RData")
